package textEditor.core.structures;

/**
 * An ArrayList implementation with an added method "contains" for determining if an element exists in the list
 * @author Mark
 *
 * @param <E> The type of objects to be contained within the ArrayList
 */

public class ArrayList<E extends Comparable<? super E>> {
	
	final private int DEFAULT_SIZE = 100;
	
	int size;
	
	Comparable[] theArray;

	//Constructors
	public ArrayList() {
		init(DEFAULT_SIZE);
	}
	
	public ArrayList(int size){
		init(size);
	}
	
	//Used for constructors
	private void init(int size){
		this.size = 0;
		theArray = new Comparable[size];
	}
	
	/**
	 * Returns the element at the specified position
	 * @param index index of element to be returned
	 * @return element at given index
	 */
	public E get(int index){
		return (E)theArray[index];
	}
	
	/**
	 * Replaces element at specified index with new element
	 * @param index the index of the element to be replaced
	 * @param element the element which will be put in the specified location
	 * @return the original element at the location
	 */
	public E set(int index, E element){
		if (index < 0 || index > size - 1){
			throw new IndexOutOfBoundsException();
		}
		
		E result = (E)theArray[index];
		theArray[index] = element;
		
		return result;
	}
	
	/**
	 * Inserts element at specified index
	 * @param index location where element should be placed
	 * @param element the element to be added
	 */
	public void add(int index, E element){
		if (index < 0 || index > size){
			throw new IndexOutOfBoundsException();
		}
		
		if (size == theArray.length){
			resize();
		}
		
		if (size != 0){
			for (int i = size; i > index; i--){
				theArray[i] = theArray[i-1];
			}
		}

		theArray[index] = element;
		size++;
	}

	//Method for resizing the array when it reaches maximum capacity
	private void resize(){
		Comparable[] temp = new Comparable[theArray.length * 2];
		
		for (int i = 0; i < theArray.length; i++){
			temp[i] = theArray[i];
		}
		
		theArray = temp;
	}

	
	/**
	 * Removes the element at index
	 * @param index location of element to be removed
	 * @return the element at the given index
	 */
	public E remove(int index){
		if (index < 0 || index > size - 1){
			throw new IndexOutOfBoundsException();
		}
		
		E result = (E)theArray[index];
		
		for (int i = index; i < size - 1; i++){
			theArray[i] = theArray[i+1];
		}
		
		size--;
		
		return result;
	}
	
	public int size(){
		return size;
	}
	
	public boolean isEmpty(){
		return size == 0;
	}
	
	
	public boolean contains(E element){
		return BinarySearch(element, 0, size() - 1);
	}
	
	private boolean BinarySearch(E element, int low, int high){
		if (low > high){
			return false;
		} 
		else {
			int mid = (low + high) / 2;
			E midElement = (E)theArray[mid];

			if (midElement.compareTo(element) == 0){
				return true;
			} else if (element.compareTo(midElement) < 0) {
				return BinarySearch(element, low, mid - 1);
			} else {
				return BinarySearch(element, mid + 1, high);
			}
		}
	}
	
	public void addLast(E element){
		add(size(), element);
	}
	
	
	
	public static void main(String[] args){
		ArrayList<Integer> test = new ArrayList<Integer>(5);
		System.out.println("isEmpty() " + test.isEmpty());
		for (int i = 0; i < 7; i++){
			System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
			test.add(i, i);
		}
		System.out.println("isEmpty() " + test.isEmpty());
		
		for (int i = 0; i < test.size(); i++){
			System.out.println("get(" + i + ") " + test.get(i));
		}
		
		System.out.println("set(1,12) " + test.set(1, 12));
		for (int i = 0; i < test.size(); i++){
			System.out.println("get(" + i + ") " + test.get(i));
		}
		
		System.out.println("add(3,16)");
		test.add(3, 16);
		System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
		for (int i = 0; i < test.size(); i++){
			System.out.println("get(" + i + ") " + test.get(i));
		}
		
		System.out.println("add(0,100)");
		test.add(0,100);
		System.out.println("add(" + test.size() + ",150)");
		test.add(test.size(), 150);
		System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
		for (int i = 0; i < test.size(); i++){
			System.out.println("get(" + i + ") " + test.get(i));
		}
		
		System.out.println("remove(5) " + test.remove(5));
		System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
		for (int i = 0; i < test.size(); i++){
			System.out.println("get(" + i + ") " + test.get(i));
		}
		int temp = test.size();
		for (int i = 0; i < temp; i++){
			System.out.println("remove(0) " + test.remove(0));
		}
		System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
		
		test = new ArrayList<Integer>();
		System.out.println("Size: " + test.size() + " Length: " + test.theArray.length);
	}
}
